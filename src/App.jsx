import { useState, useEffect } from "react";
import { read, utils } from 'xlsx';
import Drawing from 'dxf-writer';
import { save, open } from '@tauri-apps/api/dialog';
import { writeTextFile, readBinaryFile } from '@tauri-apps/api/fs';
import { listen } from '@tauri-apps/api/event'; // –î–ª—è Tauri —Å–æ–±—ã—Ç–∏–π
import "./App.css";

// –£—Ç–∏–ª–∏—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
const createDrawing = (width, length) => {
  const d = new Drawing();
  d.addLayer(0, Drawing.ACI.WHITE, 'CONTINUOUS');
  d.setActiveLayer(0);
  d.drawRect(0, 0, width, length);
  return d;
};

const generateFileName = (width, length, thickness, quantity) => {
  let fileName = `${width}x${length}`;
  if (thickness) fileName += `_${thickness}–º–º`;
  if (quantity) fileName += `_${quantity}—à—Ç`;
  return `${fileName}.dxf`;
};

const saveDXFContent = async (dxfContent, defaultFileName) => {
  const filePath = await save({
    defaultPath: defaultFileName,
    filters: [{ name: 'DXF', extensions: ['dxf'] }]
  });
  if (filePath) {
    await writeTextFile(filePath, dxfContent);
    return filePath;
  }
  return null;
};

function App() {
  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const [manualData, setManualData] = useState({
    width: '',
    length: '',
    quantity: '',
    thickness: ''
  });
  const [status, setStatus] = useState('');
  const [excelFileName, setExcelFileName] = useState('');
  const [processingStatus, setProcessingStatus] = useState(null);
  const [excelData, setExcelData] = useState([]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
  const updateManualData = (field) => (e) => {
    setManualData(prev => ({ ...prev, [field]: e.target.value }));
  };

  const handleManualDXFSave = async () => {
    const { width, length, quantity, thickness } = manualData;
    const w = parseFloat(width);
    const l = parseFloat(length);
    const qty = parseInt(quantity) || null;
    const thk = parseFloat(thickness) || null;

    if (isNaN(w) || isNaN(l)) {
      setStatus('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –¥–ª–∏–Ω—ã –∏ —à–∏—Ä–∏–Ω—ã.');
      return;
    }

    try {
      const d = createDrawing(w, l);
      const fileName = generateFileName(w, l, thk, qty);
      const filePath = await saveDXFContent(d.toDxfString(), fileName);

      if (filePath) {
        setStatus(`DXF —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filePath}`);
        setManualData({ width: '', length: '', quantity: '', thickness: '' });
      }
    } catch (error) {
      setStatus(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
      console.error('Save error:', error);
    }
  };

  const processExcelData = async (data) => {
    try {
      const workbook = read(data, { type: 'array' });
      const firstSheet = workbook.Sheets[workbook.SheetNames[0]];
      const rows = utils.sheet_to_json(firstSheet);
      setExcelData(rows);
      setProcessingStatus({ type: 'success', message: '–î–∞–Ω–Ω—ã–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ Excel.' });
    } catch (error) {
      setProcessingStatus({ type: 'error', message: `–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: ${error.message}` });
      console.error('Processing error:', error);
    }
  };

  const handleFileSelect = async () => {
    try {
      const selected = await open({
        filters: [{ name: 'Excel', extensions: ['xlsx', 'xls'] }]
      });
      if (selected) {
        const fileName = selected.split('\\').pop();
        setExcelFileName(fileName);
        const fileData = await readBinaryFile(selected);
        await processExcelData(fileData);
      }
    } catch (error) {
      setProcessingStatus({ type: 'error', message: `–û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —Ñ–∞–π–ª–∞: ${error.message}` });
      console.error('File selection error:', error);
    }
  };

  const saveSingleDXF = async (row) => {
    const width = parseFloat(row['–®–∏—Ä–∏–Ω–∞']);
    const length = parseFloat(row['–î–ª–∏–Ω–∞']);
    const thickness = row['–¢–æ–ª—â–∏–Ω–∞'] ? parseFloat(row['–¢–æ–ª—â–∏–Ω–∞']) : null;
    const quantity = row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] ? parseInt(row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']) : null;

    try {
      const d = createDrawing(width, length);
      const fileName = generateFileName(width, length, thickness, quantity);
      const filePath = await saveDXFContent(d.toDxfString(), fileName);

      if (filePath) {
        setStatus(`DXF —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω: ${filePath}`);
      } else {
        setStatus('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞.');
      }
    } catch (error) {
      setStatus(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞: ${error.message}`);
    }
  };

  const saveAllDXFs = async () => {
    try {
      const folderPath = await open({ directory: true, multiple: false });
      if (!folderPath) {
        setStatus('–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.');
        return;
      }

      let savedFilesCount = 0;
      for (const row of excelData) {
        const width = parseFloat(row['–®–∏—Ä–∏–Ω–∞']);
        const length = parseFloat(row['–î–ª–∏–Ω–∞']);
        const thickness = row['–¢–æ–ª—â–∏–Ω–∞'] ? parseFloat(row['–¢–æ–ª—â–∏–Ω–∞']) : null;
        const quantity = row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'] ? parseInt(row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']) : null;

        if (!isNaN(width) && !isNaN(length)) {
          const d = createDrawing(width, length);
          const fileName = generateFileName(width, length, thickness, quantity);
          await writeTextFile(`${folderPath}/${fileName}`, d.toDxfString());
          savedFilesCount++;
        }
      }
      setStatus(`–í—Å–µ DXF —Ñ–∞–π–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ñ–∞–π–ª–æ–≤: ${savedFilesCount}.`);
    } catch (error) {
      setStatus(`–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤: ${error.message}`);
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Ñ–∞–π–ª–æ–≤:', error);
    }
  };

  const resetExcelData = (e) => {
    e.stopPropagation();
    setExcelFileName('');
    setExcelData([]);
    setProcessingStatus(null);
    setStatus('Excel —Ñ–∞–π–ª —É–¥–∞–ª–µ–Ω –∏ —Ç–∞–±–ª–∏—Ü–∞ –æ—á–∏—â–µ–Ω–∞.');
  };

  // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Tauri drag-and-drop
  useEffect(() => {
    const unlisten = listen('tauri://file-drop', async (event) => {
      const filePaths = event.payload; // –ú–∞—Å—Å–∏–≤ –ø—É—Ç–µ–π –∫ —Ñ–∞–π–ª–∞–º
      console.log("Dropped files:", filePaths);
      if (filePaths.length > 0) {
        const filePath = filePaths[0];
        if (filePath.endsWith('.xlsx') || filePath.endsWith('.xls')) {
          setExcelFileName(filePath.split('/').pop().split('\\').pop()); // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞
          const fileData = await readBinaryFile(filePath);
          await processExcelData(fileData);
        } else {
          setProcessingStatus({ type: 'error', message: '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ —Ñ–∞–π–ª Excel (.xlsx –∏–ª–∏ .xls)' });
        }
      }
    });

    // –û—á–∏—Å—Ç–∫–∞ —Å–ª—É—à–∞—Ç–µ–ª—è –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
    return () => {
      unlisten.then(f => f());
    };
  }, []);

  // –†–µ–Ω–¥–µ—Ä–∏–Ω–≥
  return (
    <div className="container">
      <div className="manual-inputs">
        <div className="input-group">
          <div className="input-row">
            <input type="number" placeholder="–®–∏—Ä–∏–Ω–∞" value={manualData.width} onChange={updateManualData('width')} min="1" required />
            <input type="number" placeholder="–î–ª–∏–Ω–∞" value={manualData.length} onChange={updateManualData('length')} min="1" required />
          </div>
          <div className="input-row">
            <input type="number" placeholder="–¢–æ–ª—â–∏–Ω–∞ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" value={manualData.thickness} onChange={updateManualData('thickness')} min="1" />
            <input type="number" placeholder="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)" value={manualData.quantity} onChange={updateManualData('quantity')} min="1" />
          </div>
          <div className="input-row">
            <button onClick={handleManualDXFSave} className="save-button">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å DXF</button>
          </div>
        </div>
      </div>

      <div className="excel-section">
        <h2>–ó–∞–≥—Ä—É–∑–∫–∞ Excel —Ñ–∞–π–ª–∞</h2>
        <div className="excel-upload-section" onClick={handleFileSelect}>
          <div className="excel-upload-content">
            <div className="excel-icon">üìä</div>
            <p className="excel-upload-text">–ü–µ—Ä–µ—Ç–∞—â–∏—Ç–µ Excel —Ñ–∞–π–ª —Å—é–¥–∞ –∏–ª–∏ –∫–ª–∏–∫–Ω–∏—Ç–µ –¥–ª—è –≤—ã–±–æ—Ä–∞</p>
            {excelFileName && (
              <div className="excel-file-name">
                {excelFileName}
                <button onClick={resetExcelData} className="delete-button">–£–¥–∞–ª–∏—Ç—å</button>
              </div>
            )}
            {processingStatus && (
              <div className={`excel-processing-status ${processingStatus.type}`}>
                {processingStatus.message}
              </div>
            )}
          </div>
        </div>
      </div>

      {excelData.length > 0 && (
        <div className="data-table">
          <h2>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∏–∑ Excel</h2>
          <table>
            <thead>
              <tr>
                <th>–®–∏—Ä–∏–Ω–∞</th>
                <th>–î–ª–∏–Ω–∞</th>
                <th>–¢–æ–ª—â–∏–Ω–∞</th>
                <th>–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ</th>
                <th>–î–µ–π—Å—Ç–≤–∏—è</th>
              </tr>
            </thead>
            <tbody>
              {excelData.map((row, index) => (
                <tr key={index}>
                  <td>{row['–®–∏—Ä–∏–Ω–∞']}</td>
                  <td>{row['–î–ª–∏–Ω–∞']}</td>
                  <td>{row['–¢–æ–ª—â–∏–Ω–∞']}</td>
                  <td>{row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']}</td>
                  <td>
                    <button onClick={() => saveSingleDXF(row)}>–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
          <button onClick={saveAllDXFs} className="save-all-button">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –≤—Å–µ –¥–µ—Ç–∞–ª–∏</button>
        </div>
      )}

      <div className="status" style={{ color: 'red' }}>{status}</div>
    </div>
  );
}

export default App;